#!/usr/bin/env python
# -*- encoding: utf-8 -*-

import os
import json
import sys
import curses
import requests

"""
   >>> payload = dict(key1='value1', key2='value2')
   >>> r = requests.post("http://httpbin.org/post", data=payload)
   >>> print r.text
   {
     ...
     "form": {
       "key2": "value2",
       "key1": "value1"
     },
     ...
   }
"""


class NcursesCli:

    def __init__(self):

        self.myscreen = curses.initscr()

        self.myscreen.border(0)
        self.myscreen.addstr(2, 5, "GlobaLeaks client for paranoid user!")
        self.myscreen.refresh()

    def end(self):

        self.myscreen.clear()
        self.myscreen.addstr(3, 5, "Press a key to exit")
        self.myscreen.getch()
        curses.endwin()

    def select_context(self, contexts, node_name):

        self.myscreen.addstr(4, 5, "Context available from node %s" % node_name)
        base_start = 6
        counter = 0
        for context in contexts:
            counter += 1
            self.myscreen.addstr(base_start + counter, 8, "%d\t%s" % (counter, context['name']))

        while True:
            inputed = self.myscreen.getch()
            number = (inputed - 49)

            if number not in xrange(len(contexts)):
                self.myscreen.addstr(base_start + counter + 4, 5, "Invalid number selected!")
            else:
                return number


class GLRemote:

    def __init__(self, hostname):

        if hostname[:6] == '.onion':
            print "Tor not supported at the moment"
            quit()

        node_path = hostname + "/node"
        contexts_path = hostname + "/contexts"
        receivers_path = hostname + "/receivers"

        self.node = self.simple_get(node_path)
        self.contexts = self.simple_get(contexts_path)
        self.receivers = self.simple_get(receivers_path)

    def simple_get(self, restpath):

        ret = requests.get(restpath)
        if ret.status_code != 200:
            print "Invalid status code (%d) in GET %s" % (ret.status_code, restpath)
            quit()

        return json.loads(ret.content)


###############################################################
print "GlobaLeaks client for paranoid user: starting!"

if len(sys.argv) is not 2:
    print "%s need as argument the hiddenservice or the hostname of the GlobaLeaks server" % \
          sys.argv[0]
    quit()

glinfo = GLRemote(sys.argv[1])

if not glinfo.node['configured']:
    print "The node is not configured, you can't perform submission on it"
    quit()

gfx = NcursesCli()
ctxn = gfx.select_context(glinfo.contexts, glinfo.node['name'])
gfx.end()
print "\nSelected context:", glinfo.contexts[ctxn]['name']
